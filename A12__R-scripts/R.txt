## GNU R scripts

# aptitude install r-hmisc   


## added header:
## instr, atype, arg0, arg1, arg2
## ...saved under trace-fop.modif.csv

## imports for ggplot
> library(ggplot2)

## facet plot for instr ~ atype
> d <- read.csv("trace-fop.modif.csv",header=TRUE)
## function to remove outliers
> remove_outliers <- function(x,na.rm=T,...) {
  qs <- quantile(x,probs=c(.25, .75),na.rm=na.rm,...)
  interqs <- 1.5*IQR(x,na.rm=na.rm)
  y <- x
  y[x < (qs[1]-interqs)] <- NA
  y[x > (qs[2]+interqs)] <- NA
  y
}

> find_outliers <- function(y, coef = 1.5) {
  qs <- c(0, 0.25, 0.5, 0.75, 1)
  stats <- as.numeric(quantile(x, qs))
  iqr <- diff(stats[c(2, 4)])
  outliers <- x < (stats[2] - coef * iqr) | x > (stats[4] + coef * iqr)
  return(x[outliers])
}

> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(instr~atype) +
layer(
data=d,
mapping=aes(x=factor(arg0)),
stat="bin", stat_params=list(),
geom="bar", geom_params=list(),
position=position_identity()
)

## approach: removed outliers
> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(instr~atype) +
layer(
data=d,
mapping=aes(x=factor(remove_outliers(arg0))),
stat="bin", stat_params=list(),
geom="bar", geom_params=list(),
position=position_identity()
)


## approach: limit y axis
> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous(limit=c(0,70)) +
facet_grid(instr~atype) +
layer(
data=d,
mapping=aes(x=factor(arg0)),
stat="bin", stat_params=list(),
geom="bar", geom_params=list(),
position=position_identity()
)


## boxplots layer: with limited axes (since I had problems to change the scale of the axis)
> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous(limit=c(0,150)) +
layer(
data=d,
mapping=aes(x=d$atype, y=d$arg0),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=diamonds,
mapping=aes(x=d$atype, y=d$arg0),
stat="boxplot", stat_params=list(),
geom="boxplot",
geom_params=
list(color="red", fill="red", alpha=0.5),
position=position_identity()
)



      
## analyze performed array allocation instruction
      
## how many of which instruction in which file
## the following is to be executed by copy&paste on the R shell
a1 <- read.csv("trace-antlr.modif.csv",header=T)
a2 <- read.csv("trace-bloat.modif.csv",header=T)
a3 <- read.csv("trace-chart.modif.csv",header=T)
a4 <- read.csv("trace-fop.modif.csv",header=T)
a5 <- read.csv("trace-hsqldb.modif.csv",header=T)
a6 <- read.csv("trace-jython.modif.csv",header=T)
a7 <- read.csv("trace-luindex.modif.csv",header=T)
a8 <- read.csv("trace-lusearch.modif.csv",header=T)
a9 <- read.csv("trace-pmd.modif.csv",header=T)
a10 <- read.csv("trace-xalan.modif.csv",header=T)

barplot(c(table(a1$instr),MULTIANEWARRAY=NA),main="trace-antlr.csv",ylab="count",xlab="instr")
barplot(table(a2$instr),main="trace-bloat.csv",ylab="count",xlab="instr")
barplot(c(table(a3$instr),MULTIANEWARRAY=NA),main="trace-chart.csv",ylab="count",xlab="instr")
barplot(c(table(a4$instr),MULTIANEWARRAY=NA),main="trace-fop.csv",ylab="count",xlab="instr")
barplot(c(table(a5$instr),MULTIANEWARRAY=NA),main="trace-hsqldb.csv",ylab="count",xlab="instr")
barplot(c(table(a6$instr),MULTIANEWARRAY=NA),main="trace-jython.csv",ylab="count",xlab="instr")
barplot(c(table(a7$instr),MULTIANEWARRAY=NA),main="trace-luindex.csv",ylab="count",xlab="instr")
barplot(c(table(a8$instr),MULTIANEWARRAY=NA),main="trace-lusearch.csv",ylab="count",xlab="instr")
barplot(c(table(a9$instr),MULTIANEWARRAY=NA),main="trace-pmd.csv",ylab="count",xlab="instr")
barplot(c(table(a10$instr),MULTIANEWARRAY=NA),main="trace-xalan.csv",ylab="count",xlab="instr")


## data.frame construction under R is rocket science...
d <- c(table(a1$instr),"MULTIANEWARRAY"=0,"filename"="trace-antlr.csv")
d <- rbind(d,c(table(a2$instr),"filename"="trace-bloat.csv"))
d <- rbind(d,c(table(a3$instr),"MULTIANEWARRAY"=0,"filename"="trace-chart.csv"))
d <- rbind(d,c(table(a4$instr),"MULTIANEWARRAY"=0,"filename"="trace-fop.csv"))
d <- rbind(d,c(table(a5$instr),"MULTIANEWARRAY"=0,"filename"="trace-hsqldb.csv"))
d <- rbind(d,c(table(a6$instr),"MULTIANEWARRAY"=0,"filename"="trace-jython.csv"))
d <- rbind(d,c(table(a7$instr),"MULTIANEWARRAY"=0,"filename"="trace-luindex.csv"))
d <- rbind(d,c(table(a8$instr),"MULTIANEWARRAY"=0,"filename"="trace-lusearch.csv"))
d <- rbind(d,c(table(a9$instr),"MULTIANEWARRAY"=0,"filename"="trace-pmd.csv"))
d <- rbind(d,c(table(a10$instr),"MULTIANEWARRAY"=0,"filename"="trace-xalan.csv"))

## convert to data.frame
dftmp <- data.frame(d,row.names=1:nrow(d))
## in for loop
for( i in 1:nrow(d) ){
     if(i==1) {
          df <- cbind(instr=names(dftmp[1:3]),count=t(dftmp[1,1:3])[1:3], filename= matrix(dftmp$filename)[1])
     }else{
          df <- rbind(df,cbind(instr=names(dftmp[1:3]),count=t(dftmp[i,1:3])[1:3], filename= matrix(dftmp$filename)[i]))
     }
}
## convert to data.frame
df <- data.frame(df)

## count is still a 'factor' and thus not plotable
df$count <- as.numeric(as.character(df$count))

## boxplot printing of distribution of calls
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
layer(
data=df,
mapping=aes(x=instr, y=count),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=df,
mapping=aes(x=instr, y=count),
stat="boxplot", stat_params=list(),
geom="boxplot",
geom_params=
list(color="red", fill="red", alpha=0.5),
position=position_identity()
)

## particular, per filename
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~filename) +
layer(
data=df,
mapping=aes(x=instr, y=count),
stat="identity",stat_params=list(),
geom="point",geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=df,
mapping=aes(x=instr, y=count),
stat="boxplot",stat_params=list(),
geom="boxplot",geom_params=list(color="red", fill="red", alpha=0.5),
position=position_identity()
)


     
## analyze allocated types, independent of array instruction
     
## how many of which instruction in which file
a1 <- read.csv("trace-antlr.modif.csv",header=T)
a2 <- read.csv("trace-bloat.modif.csv",header=T)
a3 <- read.csv("trace-chart.modif.csv",header=T)
a4 <- read.csv("trace-fop.modif.csv",header=T)
a5 <- read.csv("trace-hsqldb.modif.csv",header=T)
a6 <- read.csv("trace-jython.modif.csv",header=T)
a7 <- read.csv("trace-luindex.modif.csv",header=T)
a8 <- read.csv("trace-lusearch.modif.csv",header=T)
a9 <- read.csv("trace-pmd.modif.csv",header=T)
a10 <- read.csv("trace-xalan.modif.csv",header=T)

## filter out MULTIANEWARRAY for this
a1 <- a1[a1$instr!="MULTIANEWARRAY",]
a2 <- a2[a2$instr!="MULTIANEWARRAY",]
a3 <- a3[a3$instr!="MULTIANEWARRAY",]
a4 <- a4[a4$instr!="MULTIANEWARRAY",]
a5 <- a5[a5$instr!="MULTIANEWARRAY",]
a6 <- a6[a6$instr!="MULTIANEWARRAY",]
a7 <- a7[a7$instr!="MULTIANEWARRAY",]
a8 <- a8[a8$instr!="MULTIANEWARRAY",]
a9 <- a9[a9$instr!="MULTIANEWARRAY",]
a10 <- a10[a10$instr!="MULTIANEWARRAY",]


## count occurences of atype
d <- cbind(tapply(a1$arg0,INDEX=list(a1$atype),FUN=sum),filename="trace-antlr.csv")
d <- rbind(d,cbind(tapply(a2$arg0,INDEX=list(a2$atype),FUN=sum),filename="trace-bloat.csv"))
d <- rbind(d,cbind(tapply(a3$arg0,INDEX=list(a3$atype),FUN=sum),filename="trace-chart.csv"))
d <- rbind(d,cbind(tapply(a4$arg0,INDEX=list(a4$atype),FUN=sum),filename="trace-fop.csv"))
d <- rbind(d,cbind(tapply(a5$arg0,INDEX=list(a5$atype),FUN=sum),filename="trace-hsqldb.csv"))
d <- rbind(d,cbind(tapply(a6$arg0,INDEX=list(a6$atype),FUN=sum),filename="trace-jython.csv"))
d <- rbind(d,cbind(tapply(a7$arg0,INDEX=list(a7$atype),FUN=sum),filename="trace-luindex.csv"))
d <- rbind(d,cbind(tapply(a8$arg0,INDEX=list(a8$atype),FUN=sum),filename="trace-lusearch.csv"))
d <- rbind(d,cbind(tapply(a9$arg0,INDEX=list(a9$atype),FUN=sum),filename="trace-pmd.csv"))
d <- rbind(d,cbind(tapply(a10$arg0,INDEX=list(a10$atype),FUN=sum),filename="trace-xalan.csv"))

## convert to data.frame (this will print some warnings)
df <- data.frame(cbind(rownames(d),d))
colnames(df) <- c("atype", "count", "filename")

## check if "count" is numeric?
lapply(df,class)
df$count <- as.numeric(as.character(df$count))



  
## boxplot printing of distribution of calls
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous(limits=c(0,500)) +
layer(
data=df,
mapping=aes(x=atype, y=count),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=df,
mapping=aes(x=atype, y=count),
stat="boxplot", stat_params=list(),
geom="boxplot",
geom_params=
list(color="red", fill="red", alpha=0.5),
position=position_identity()
)

  
## particular, per filename
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous(limits=c(0,150)) +
facet_wrap(~filename) +
layer(
data=df,
mapping=aes(x=atype, y=count),
stat="identity",stat_params=list(),
geom="point",geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=df,
mapping=aes(x=atype, y=count),
stat="boxplot",stat_params=list(),
geom="boxplot",geom_params=list(color="red", fill="red", alpha=0.5),
position=position_identity()
)




                                            
## testing grounds ############################################################



## read data # don't use the read.csv2()
> d <- read.csv("trace-fop.NEWARRAY.csv",header=TRUE)
> tb <- d$count[d$atype==' [B']
> tc <- d$count[d$atype==' [C']
> td <- d$count[d$atype==' [D']
# TODO better do by all diverse elements in 'atype', for later objects   

## histogram
> require(Hmisc)
> histbackback(ti,tc,ylab="counts",main="[I vs [C counts")
# TODO doesn't show a lot   



## fancy histogram
> options(digits=1)
> out <- histbackback(ti,tc,ylab="counts",main="[I vs [C counts")
> barplot(-out$left,col=rgb(0.8,0.7,0),horiz=T,space=0,add=T,axes=F)
> barplot(out$right,col=rgb(0.7,0.7,0.6),horiz=T,space=0,add=T,axes=F)
# TODO doesn't show a lot   





## quantil quantil plot
> boxplot(ti,tc,names=c("[I","[C"),ylab="count",col=c(rgb(0.7,0.8,0),rgb(0.7,0.7,0.6)))
> boxplot(ti,names=c("[I"),ylab="count",col=c(rgb(0.7,0.8,0))),outline=F)


## ecdf
# TODO one for each d$atype and col different    
> plot(
ecdf(ti),
verticals=T,lwd=2,
col.hor="red",col.vert="red",
main="cumulative distribution",
xlab="samples",
ylab="cumulative number of count")


> plot(
ecdf(tc),
verticals=T,lwd=2,
col.hor="blue",col.vert="blue",add=T)

# FIXME: legend is missing...       
> legend("topleft",c(ti,tc),col=c("red","blue"),pch=20,bg="white")


## qqplot
# TODO does not work here since not comparing two sets of equal numbers   
> ti <- t(ti)
> tc <- t(tc)
> qqplot(ti,tc,
xlim=c(0,ncol(ti)),ylim=c(0,ncol(tc)),
xlab="i counts",ylab="c counts",
main="Quantile-Quantile-Plot")
## draw grey line
> abline(0,1,col="gray")


## finding a pdf, e.g. for tc
> tc <- c(tc)
> xx <- seq(min(tc),max(tc),length=500)
> yy <- dnorm(xx,m=mean(tc),sd=sd(tc))
> plot(xx,yy,type="l",col="blue",lwd=2,
main="fitting normal distribution",
xlab="samples",ylab="density")
> abline(v=mean(tc))
> abline(v=mean(tc)-sd(tc),col="grey")
> abline(v=mean(tc)+sd(tc),col="grey")
# TODO does not show anything since xx has values up to 4000 something, due to max(ti,tc,t???)
## histogram overlay
> hist(tc,freq=F,col=rgb(0.9,0.9,0.9),main="fitting normal distribution",xlab="samples",ylab="counts")
> xx <- seq(min(tc),max(tc),length=500)
> yy <- dnorm(xx, m=mean(tc),sd=sd(tc))
> lines(xx,yy,col="blue",lwd=2)


> sn <- rnorm(nrow(d),m=mean(ti), sd=sd(tc))





                                                                               

## print all array sizes by type
> ggplot() +
  coord_cartesian() +
  scale_x_discrete() +
  scale_y_continuous() +
  layer(
        data=d,
        mapping=aes(x=d$atype,d$count),
        stat="identity", stat_params=list(),
        geom="point",
        geom_params=list(),
        position=position_identity()
  )


> ggplot() +
  coord_cartesian() +
  scale_x_discrete() +
  scale_y_continuous() +
  layer(
        data=d,
        mapping=aes(x=d$atype,d$count),
        stat="identity", stat_params=list(),
        geom="point",
        geom_params=list(),
        position=position_jitter(width=0.3,height=0)
  )
# TODO, nice, but single outliers corrupt everything    


> ggplot() +
  coord_cartesian() +
  scale_x_discrete() +
  scale_y_continuous() +
  layer(
        data=d,
        mapping=aes(x=d$atype,d$count),
        stat="boxplot", stat_params=list(),
        geom="boxplot", geom_params=list(),
        position=position_dodge()
  )
# TODO, nice, but single outliers corrupt everything    




# TODO, nice, but single outliers corrupt everything    



## colorfull hue plot
> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
scale_color_hue() +
facet_wrap(~atype) +
layer(
data=d,
mapping=aes(x=atype, y=count),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
)
# TODO no color defined for d    
#mapping=aes(x=atype, y=count, color=color),




## go for the facets

> ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~atype) +
layer(
data=d,
mapping=aes(x=atype, y=count),
stat="identity",stat_params=list(),
geom="point",geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=d,
mapping=aes(x=atype, y=count),
stat="boxplot",stat_params=list(),
geom="boxplot",geom_params=list(color="red", fill="red", alpha=0.5),
position=position_identity()
)
# TODO still issue with outliers                                                







                                 
## NOTES ######################################################################




> dftmp <- data.frame(d,row.names=1:nrow(d))
> dftmp
   ANEWARRAY NEWARRAY MULTIANEWARRAY           filename
1     121989   324850              0    trace-antlr.csv
2     409337        8           7103    trace-bloat.csv
3       7409  2263766              0    trace-chart.csv
4      18829    19972              0      trace-fop.csv
5     709171    50805              0   trace-hsqldb.csv
6    3224751   151947              0   trace-jython.csv
7       1526   717231              0  trace-luindex.csv
8     393293  1713433              0 trace-lusearch.csv
9      68085      651              0      trace-pmd.csv
10    136456   806282              0    trace-xalan.csv

## butwhat we need the table in a different format
            instr   count           filename
1       ANEWARRAY  121989    trace-antlr.csv
2        NEWARRAY  324850    trace-antlr.csv
3  MULTIANEWARRAY       0    trace-antlr.csv
4       ANEWARRAY  409337    trace-bloat.csv
5        NEWARRAY       8    trace-bloat.csv
6  MULTIANEWARRAY    7103    trace-bloat.csv
7       ANEWARRAY    7409    trace-chart.csv
8        NEWARRAY 2263766    trace-chart.csv
9  MULTIANEWARRAY       0    trace-chart.csv
10      ANEWARRAY   18829      trace-fop.csv
11       NEWARRAY   19972      trace-fop.csv
12 MULTIANEWARRAY       0      trace-fop.csv
13      ANEWARRAY  709171   trace-hsqldb.csv
14       NEWARRAY   50805   trace-hsqldb.csv
15 MULTIANEWARRAY       0   trace-hsqldb.csv
16      ANEWARRAY 3224751   trace-jython.csv
(...)

## not exactly the necessary format
df <- as.data.frame.matrix(t(d))

## using cbind to set up correct format, but very "manual"
df <- data.frame(cbind(instr=c("NEWARRAY","ANEWARRAY","MULTIANEWARRAY"),count=c(121989,324850,0),filename="trace-antlr.csv"))

in more general terms
#df <- data.frame(cbind(instr=names(dftmp[1:3]),count=t(dftmp[1,1:3])[1:3], filename= matrix(dftmp$filename)[1]))

## summary in for loop
for( i in 1:nrow(d) ){
     if(i==1) {
          df <- cbind(instr=names(dftmp[1:3]),count=t(dftmp[1,1:3])[1:3], filename= matrix(dftmp$filename)[1])
     }else{
          df <- rbind(df,cbind(instr=names(dftmp[1:3]),count=t(dftmp[i,1:3])[1:3], filename= matrix(dftmp$filename)[i]))
     }
}

## convert to data.frame
df <- data.frame(df)

## print all counts of count where instr is NEWARRAY
> df$count[df$instr=="NEWARRAY"]






tc <- c(tc)
xx <- seq(min(tc),max(tc),length=500)
yy <- dnorm(xx,m=mean(tc),sd=sd(tc))
plot(xx,yy,type="l",col="blue",lwd=2,
main="fitting normal distribution",
xlab="samples",ylab="density")

abline(v=mean(tc))
abline(v=mean(tc)-sd(tc),col="grey")
abline(v=mean(tc)+sd(tc),col="grey")

# TODO does not show anything since xx has values up to 4000 something, due to max(ti,tc,t???)
## histogram overlay
hist(tc,freq=F,col=rgb(0.9,0.9,0.9),main="fitting normal distribution",xlab="samples",ylab="counts")
xx <- seq(min(tc),max(tc),length=500)
yy <- dnorm(xx, m=mean(tc),sd=sd(tc))
lines(xx,yy,col="blue",lwd=2)





## 1st dimension
boxplot(a2$arg0[a2$instr=="MULTIANEWARRAY"],xlab="sample: trace-bloat.csv",ylab="size",main="MULTIANEWARRAY, 1. dimension")

## 2nd dimension
boxplot(a2$arg1[a2$instr=="MULTIANEWARRAY"],xlab="sample: trace-bloat.csv",ylab="size",main="MULTIANEWARRAY, 2. dimension")

## 3rd dimension
boxplot(a2$arg2[a2$instr=="MULTIANEWARRAY"],xlab="sample: trace-bloat.csv",ylab="size",main="MULTIANEWARRAY, 3. dimension")



## convert from data.frame to matrix

df <- as.data.frame.matrix(t(d))










                                                            


## imports for ggplot
> library(ggplot2)

ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
layer(
data=diamonds,
mapping=aes(x=carat, y=price),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)


ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="boxplot", stat_params=list(),
geom="boxplot", geom_params=list(),
position=position_dodge()
)


ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.2, height=0)
) +
layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="boxplot", stat_params=list(),
geom="boxplot",
geom_params=
list(color="red", fill="red", alpha=0.5),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
scale_color_hue() +
layer(
data=diamonds,
mapping=aes(x=carat, y=price, color=color),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
scale_color_hue() +
facet_wrap(~cut) +
layer(
data=diamonds,
mapping=aes(x=carat, y=price, color=color),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
scale_color_hue() +
facet_wrap(~cut) +
layer(
data=diamonds,
mapping=aes(x=carat, y=price, color=color),
stat="identity", stat_params=list(),
geom="point",
geom_params=list(),
position=position_identity()
) +
layer(
data=diamonds,
mapping=aes(x=carat, y=price),
stat="smooth", stat_params=list(),
geom="smooth", geom_params=list(),
position=position_identity()
)


ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(clarity~cut) +
layer(
data=diamonds,
mapping=aes(x=color),
stat="bin", stat_params=list(),
geom="bar", geom_params=list(),
position=position_identity()
)



